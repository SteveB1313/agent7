"""insights table

Revision ID: dc477974a4e1
Revises: 
Create Date: 2020-03-31 02:42:27.479553

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dc477974a4e1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_addomain_domain', table_name='addomain')
    op.drop_table('addomain')
    op.drop_index('ix_bhdata_category', table_name='bhdata')
    op.drop_table('bhdata')
    op.drop_index('ix_adasset_asset_name', table_name='adasset')
    op.drop_index('ix_adasset_asset_type', table_name='adasset')
    op.drop_table('adasset')
    op.drop_table('testagent')
    op.drop_index('ix_bhscoring_query_name', table_name='bhscoring')
    op.drop_table('bhscoring')
    op.drop_table('testjob')
    op.drop_table('fieldindexer')
    op.drop_table('license')
    op.drop_table('agentversion')
    op.drop_table('issues')
    op.drop_table('testjson')
    op.drop_table('agent_software')
    op.drop_table('adschema')
    op.drop_table('testing')
    op.drop_table('testgroup')
    op.drop_table('testtable')
    op.add_column('grade', sa.Column('ad_risk', sa.Integer(), nullable=True))
    op.add_column('grade', sa.Column('agent_risk', sa.Integer(), nullable=True))
    op.add_column('grade', sa.Column('total_risk', sa.Integer(), nullable=True))
    op.add_column('grade', sa.Column('watcher_risk', sa.Integer(), nullable=True))
    op.drop_column('grade', 'agent_score')
    op.drop_column('grade', 'ad_score')
    op.drop_column('grade', 'watcher_score')
    op.drop_column('grade', 'total_score')
    op.add_column('insight', sa.Column('risk', sa.Integer(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('insight', 'risk')
    op.add_column('grade', sa.Column('total_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('grade', sa.Column('watcher_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('grade', sa.Column('ad_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('grade', sa.Column('agent_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('grade', 'watcher_risk')
    op.drop_column('grade', 'total_risk')
    op.drop_column('grade', 'agent_risk')
    op.drop_column('grade', 'ad_risk')
    op.create_table('testtable',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('message', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('istrue', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='testtable_pkey')
    )
    op.create_table('testgroup',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='testgroup_pkey')
    )
    op.create_table('testing',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='testing_pkey')
    )
    op.create_table('adschema',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ad_func', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('date_added', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='adschema_pkey')
    )
    op.create_table('agent_software',
    sa.Column('hostname', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_table('testjson',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='testjson_pkey')
    )
    op.create_table('issues',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['issues.id'], name='issues_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='issues_pkey')
    )
    op.create_table('agentversion',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='agentversion_pkey'),
    sa.UniqueConstraint('name', name='agentversion_name_key')
    )
    op.create_table('license',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ad_module', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('agent_module', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('domain_module', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('threatfeed_module', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('elastic_module', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='license_pkey')
    )
    op.create_table('fieldindexer',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tablename', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mapping', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('istrue', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='fieldindexer_pkey')
    )
    op.create_table('testjob',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('scope', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('jobset', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('date_added', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='testjob_pkey')
    )
    op.create_table('bhscoring',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('asset_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('domain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('query_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_added', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['addomain.id'], name='bhscoring_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bhscoring_pkey')
    )
    op.create_index('ix_bhscoring_query_name', 'bhscoring', ['query_name'], unique=False)
    op.create_table('testagent',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('hostname', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='testagent_pkey')
    )
    op.create_table('adasset',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('asset_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('asset_type', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_honeypot', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('date_added', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['addomain.id'], name='adasset_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='adasset_pkey')
    )
    op.create_index('ix_adasset_asset_type', 'adasset', ['asset_type'], unique=False)
    op.create_index('ix_adasset_asset_name', 'adasset', ['asset_name'], unique=False)
    op.create_table('bhdata',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('domain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('date_added', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['addomain.id'], name='bhdata_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bhdata_pkey')
    )
    op.create_index('ix_bhdata_category', 'bhdata', ['category'], unique=False)
    op.create_table('addomain',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('domain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('trust', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('date_added', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='addomain_pkey')
    )
    op.create_index('ix_addomain_domain', 'addomain', ['domain'], unique=False)
    # ### end Alembic commands ###
